d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
plot(hclust(d, method="complete"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
plot(hclust(d, method="single"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
plot(hclust(d, method="average"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
plot(hclust(d, method="single"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
plot(hclust(d, method="average"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
plot(hclust(d, method="complete"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4, labels=c(1,2,3,4)))
plot(hclust(d, method="complete"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4, labels=c(1,2,3,4)))
plot(hclust(d, method="complete"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
plot(hclust(d, method="complete"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
plot(hclust(d, method="average"))
d = as.dist(matrix(c(0, 0.3, 0.4, 0.7,
0.3, 0, 0.5, 0.8,
0.4, 0.5, 0.0, 0.45,
0.7, 0.8, 0.45, 0.0), nrow=4))
plot(hclust(d, method="complete"))
install.packages(c("Dplyr", "Ggplot2", "Esquisse", "BioConductor", "Lubridate", "Mlr", "Caret", "RMarkdown"))
install.packages(c("dplyr", "ggplot2", "esquisse", "lubridate", "mlr", "caret", "rmarkdown"))
cls
import(dplyr);
library(dyplr)
library(dplyr)
?goog
?goog
goog
goog.dom.dataset
install.packages("goog.dom.dataset")
install.packages("goog")
?diff
box.test
?Box.test
goog
goog200
install.packages(goog200)
install.packages("goog200")
install.packages("goog200")
goog200
?goog200
?fpp2
install.packages('fpp2', dependencies = TRUE)
library(fpp2)
goog
install.packages('fpp2', dependencies = TRUE)
library(fpp2)
goog
autoplot(goog)
livestock
?goog
?livestock
install.packages("fracdiff")
install.packages('fpp2', dependencies = TRUE)
library(dplyr)
library(fpp2)
library.packages("forecast")
install.packages("fpp")
install.packages("fpp2")
library(fpp)
install.packages(c("expsmooth", "fma", "forecast"))
library(fpp)
install.packages("zoo")
install.packages("zoo")
library(fpp2)
library(forecast)
library(ggplot2)
library(forecast)
library(fma)
library(fpp2)
goog
# Plot the original series
autoplot(goog)
# Plot the original series
autoplot(goog)
# Plot the original series
autoplot(goog)
# Plot the differenced series
autoplot(diff(goog))
# ACF of the differenced series
ggAcf(diff(goog))
# Ljung-Box test of the differenced series
Box.test(diff(goog), lag = 10, type = "Ljung")
# Check the residuals from the naive forecasts applied to the goog series
goog %>% naive() %>% checkresiduals()
# Check the residuals from the seasonal naive forecasts applied to the ausbeer series
ausbeer %>% snaive() %>% checkresiduals()
?autoplot
?checkresiduals
setwd('/Users/vphan/WorkPlace/DataScience/Projects/Data Exploration/movie_tweetings/notebooks')
getwd()
knitr::opts_chunk$set(echo = TRUE, out.width = '80%', fig.align = 'center')
summary(cars)
getwd()
data.tbl_schema <- read_csv(params$tble_schema_url)
library(readr)
library(dplyr)
library(ggplot2)
library(knitr)
knitr::opts_chunk$set(
echo = TRUE,
fig.align = "center",
message = FALSE,
warning = FALSE,
out.width = "80%"
)
if(!require("pacman")){
install.packages("pacman")
}
pacman::p_load(DT, readr, tidyr, dplyr, ggplot2, tmap, scales, leaflet, shiny, stringr, knitr, lubridate, rsconnect)
# library(DT)
# library(readr)
# library(tidyr)
# library(dplyr)
# library(ggplot2)
# library(tmap)
# library(tmap)
# library(scales)
# library(leaflet)
# library(shiny)
# library(stringr)
# library(knitr)
# library(lubridate)
# library(rsconnect)
# load data
data.tbl_schema <- read_csv(params$tbl_schema_url)
data.raw.users <- read_table(params$users_url, col_names = FALSE)
data.raw.ratings <- read_table(params$ratings_url, col_names = FALSE)
data.raw.movies <- read_table(params$movies_url, col_names = FALSE) # R doesnt allow read "::" due to limit 1 byte of separator
# check data structure
glimpse(data.raw.users)
glimpse(data.raw.movies)
glimpse(data.raw.ratings)
# convert into dataframe
users_col <- data.tbl_schema$attributes[which(data.tbl_schema$dataset == 'users')]
users_col <- unlist(str_split(users_col, pattern = "::"))
movies_col <- data.tbl_schema$attributes[which(data.tbl_schema$dataset == 'movies')]
movies_col <- unlist(str_split(movies_col, pattern = "::"))
ratings_col <- data.tbl_schema$attributes[which(data.tbl_schema$dataset == 'ratings')]
ratings_col <- unlist(str_split(ratings_col, pattern = "::"))
# separate by "::"
data.users <- separate(data.raw.users, col = X1, into = users_col, sep = "::",remove = TRUE)
data.movies <- separate(data.raw.movies, col = X1, into = movies_col, sep = "#", remove = TRUE)
data.ratings <- separate(data.raw.ratings, col = X1, into = ratings_col, sep = "::", remove = TRUE)
# seprate each cell in genre to rows
data.movies <- separate_rows(data.movies, genre)
# transform timestamp to datetime format
data.ratings <- transform(data.ratings, rating = as.numeric(rating), rating_date = as.numeric(rating_timestamp))
data.ratings$rating_date <- as.POSIXct(data.ratings$rating_date, origin = lubridate::origin)
data.ratings <- data.ratings %>% select(user_id, movie_id, rating, rating_date)
# Movie data after cleaning
head(data.movies)
# count empty genre
glimpse(data.movies[data.movies$genre == "",])
# remove NA rows
data.movies <- data.movies[data.movies$genre != "",]
# check outlier of rating feature
boxplot(data.ratings$rating)
# Set constant variables
TOP_K <- 50 # top k popular movies
HIGH_RATING <- 8 # any ratings less than 8 is not considered as High
GENRE <- sort(unique(data.movies$genre))
# join ratings vs movies
data.mov_rat <- data.ratings %>% left_join(data.movies, by = "movie_id") %>%
mutate(rating_year = year(rating_date)) %>%
select(user_id, movie_id, rating, rating_year, rating_date, movie_title, genre)
# Compute
comp.mov_rat <- data.mov_rat %>%
group_by(movie_id, movie_title, genre, rating_year) %>%
summarise(rat_number = n(),
rat_high_quality = sum(rating[rating >= HIGH_RATING]),
rat_mean_quality = round(mean(rating), 2),
rat_log_num_high = round(sum(log(rat_number) + log(rat_high_quality)), 3))
# Select top_k movie / genre by quality (qua) or quantity (qty)
res.gen_mov.qty <- comp.mov_rat %>%
group_by(genre) %>%
top_n(TOP_K, rat_number) %>%
arrange(genre, desc(rat_number)) %>%
select(movie_id, movie_title, genre, rating_year, rat_number, rat_mean_quality, rat_log_num_high) %>%
rename("Movie ID" = movie_id, "Title" = movie_title, "Genre" = genre, "Year Rated" = rating_year,
"# Ratings" = rat_number, "AVG Ratings" = rat_mean_quality, "Popularity" = rat_log_num_high)
res.gen_mov.qlt <- comp.mov_rat %>%
group_by(genre) %>%
top_n(TOP_K, rat_high_quality) %>%
arrange(genre, desc(rat_high_quality)) %>%
select(movie_id, movie_title, genre, rating_year, rat_number, rat_mean_quality, rat_log_num_high) %>%
rename("Movie ID" = movie_id, "Title" = movie_title, "Genre" = genre, "Year Rated" = rating_year,
"# Ratings" = rat_number, "AVG Ratings" = rat_mean_quality, "Popularity" = rat_log_num_high)
res.gen_mov.popularity <- comp.mov_rat %>%
group_by(genre) %>%
top_n(TOP_K, rat_log_num_high) %>%
arrange(genre, desc(rat_log_num_high)) %>%
select(movie_id, movie_title, genre, rating_year, rat_number, rat_mean_quality, rat_log_num_high) %>%
rename("Movie ID" = movie_id, "Title" = movie_title, "Genre" = genre, "Year Rated" = rating_year,
"# Ratings" = rat_number, "AVG Ratings" = rat_mean_quality, "Popularity" = rat_log_num_high)
# Load dynamic data
tbl_data <- reactive({
if(input$MyOption == 'Most Popular'){
filter(res.gen_mov.popularity, Genre %in% input$MyGenre)
}
if(input$MyOption == 'Highest Rating'){
filter(res.gen_mov.qlt, Genre %in% input$MyGenre)
}
else{
filter(res.gen_mov.qty, Genre %in% input$MyGenre)
}
})
# Render
fluidPage(
titlePanel("Movie Popularity"),
# Render dropdown box
fluidRow(
column(4, selectInput("MyOption", "Sort option: ",
choices = c("Most Popular" ,"Highest Rating", "Highest Views"),
multiple = FALSE, selected = "Most Popular")
),
column(4, selectInput("MyGenre", "Filter by Genre: ",
choices = GENRE, multiple = FALSE, selected = "Action")
)
),
# Render data table
renderDT({
datatable(tbl_data(),
options = list(pageLength = 10, autoWidth = TRUE)
)
})
)
